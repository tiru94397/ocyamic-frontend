"use client";
import * as React from 'react';
import { useCallback } from 'react';
import { isRefObject } from '../../utils/is-ref-object.mjs';

/**
 * Creates a ref function that, when called, hydrates the provided
 * external ref and VisualElement.
 */
function useMotionRef(visualState, visualElement, externalRef) {
    const currentInstanceRef = React.useRef(null);
    return useCallback((instance) => {
        const prevInstance = currentInstanceRef.current;
        currentInstanceRef.current = instance;
        // Only run mount/unmount logic when the instance actually changes
        if (instance !== prevInstance) {
            if (instance) {
                visualState.onMount && visualState.onMount(instance);
            }
            if (visualElement) {
                if (instance) {
                    visualElement.mount(instance);
                }
                else {
                    visualElement.unmount();
                }
            }
        }
        if (externalRef) {
            if (typeof externalRef === "function") {
                externalRef(instance);
            }
            else if (isRefObject(externalRef)) {
                externalRef.current = instance;
            }
        }
    }, 
    /**
     * Include externalRef in dependencies to ensure the callback updates
     * when the ref changes, allowing proper ref forwarding.
     */
    [visualElement, externalRef]);
}

export { useMotionRef };
